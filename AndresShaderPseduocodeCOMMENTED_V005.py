import maya.cmds as mc
import os.path
import ntpath
import json

#GITHUB LINK
#https://github.com/Komissarts/TechDeckRepo

#ASSUMPTION 1: ARTISTS CREATING SHADERS INCREMENT VERSION NUMBERS
    #i.e. PublishShaders() Only Increments Packaged Shader Files, not the individual Shaders Themselves

#Get Relative file path for model being shaded

ProjectDir = mc.workspace(q=True, rd=True) #Gets Relative file path for PROJECT - not scene or model

#String DirectoryValues for different Folders
ShaderWIP_Dir = ProjectDir + "Scenes/wip/tst/surfacing"
ShaderPUB_Dir = ProjectDir + "Scenes/publish/tst/surfacing"
LightingWIP_Dir = ProjectDir + "Scenes/wip/tst/lighting"
LightingPUB_Dir = ProjectDir + "Scenes/publish/tst/lighting"

#Boolean Value that would check if the current scene is in the Lighting or Shader folder branch
#If The Scene is currently in Shader Branch, Value would be false, vice versa if is in Lighting
isCurrentlyInLighting = False

def PublishShaders():
    selected = mc.ls(selection = True)
    ShadersToExport = []
    if(len(selected) == 0):
        print("No Meshes Selected - Exporting All Shaders")
        selected = mc.ls(mat = True)
        mc.select(selected)
        print("Shaders Exported: "+str(selected))
    else:
        for i in range(len(selected)):
            selectedMesh = mc.listRelatives(selected[i], shapes=True)[0]
            selectedMeshShading = mc.listConnections(selectedMesh, type="shadingEngine")[0]
            selectedMat = mc.listConnections(selectedMeshShading + ".surfaceShader")[0]
            
            ShadersToExport.append(selectedMat)
            
        mc.select(ShadersToExport)
        print("Shaders Exported: "+str(ShadersToExport))

    NewVerNum = mc.intField(TEMPSHADERTEST, q = True, value = True) #TestVersionNumber
    
############################################ PSEDUDOCODE STARTS ############################################
######Check Version numbers in ShaderPublished Directory, increment the new version number
#    for file in ShaderPUB_Dir:
#        if(fileVerNum > NewVerNum):
#            NewVerNum++
#    
#    #Save ShadersToExport and connected Geometry into JSON File
############################################ PSEDUDOCODE END ############################################
    
    #Ideally have the name AutoGenerated based on folder structure
    mc.file(ShaderPUB_Dir + "/tst_Surfacing_v"+str(NewVerNum)+".mb", force=True, op="v=0;", typ="mayaBinary", pr=True, es=True)
    print ("To Directory: " + ShaderPUB_Dir + "/tst_Surfacing_v"+str(NewVerNum)+".mb")
    


def ImportLatestShaders():

############################################ PSEDUDOCODE STARTS ############################################
######Go Through every file version in Shader Published Directory until find largest version num (most recent)
#    HighestVerNum = 0
#    VerIterator = 0
#    for file in ShaderPUB_Dir:
#        if(fileVerNum > VerIterator ):
#            HighestVerNum = VerIterator
#            VerIterator ++
#
#    mc.file(import ShaderPUB_Dir + "/tst_Surfacing_v"+str(HighestVerNum)+".mb") #Import most recent Shader Ver
#    
#    
######Go through every shader in the project file, check if there are duplicate named shaders
######Add the lower version number to OutdatedShaders List, add newest version number to NewShaders List
#     #Import shader & material connection data through .JSON file
######Delete All shaders in OutdatedShaders
#    outdatedShaders = []
#    newShaders = []
#    for shader in currentScene:
#        if(duplicate of same shader):
#            outdatedShaders.append(shader v < highestVerNum)
#            newShaders.append(Shader_VhighestNumber)
#        
#        mc.delete(outdatedShaders)
#    
######Allows the user to select specific objects/meshes to reapply the shaders to
######Otherwise, the new matching shaders will be applied to everything in the scene
#    selected = mc.ls(selection = True)
#    MeshesToReshade = []
#    if(len(selected) == 0):
#        print("No Meshes Selected - Reapplying All Recent Shaders")
#        selected = mc.ls(type = 'geometryShape')
#        
##########For every Object, compare it's name with the shader names from the newShaders List
##########If the Names Match - Apply shader to mesh
#        for object in selected:
#            
#        
#    else:
#        for i in range(len(selected)):
#############Same as above, but filtered by user selected meshes and models
#            selectedMesh = mc.listRelatives(selected[i], shapes=True)[0]
#            selectedMeshShading = mc.listConnections(selectedMesh, type="shadingEngine")[0]
#            
#            for shader in newShaders:
#                mc.addAttribute(selectedMeshShading)
#############selectedMat = mc.listConnections(selectedMeshShading + ".surfaceShader")[0]
#            
#            ShadersToExport.append(selectedMat)
#            mc.select(selectedMat, tgl = True)
############################################ PSEDUDOCODE END ############################################
    
    print("ImportLighting")




def ApplyCustomShaders():
    ShaderVer = mc.intField(LightingVerInput, q = True, value = True)

############################################ PSEDUDOCODE STARTS ############################################
#####Loop through versions in Shader Published Folder until Desired Shader Ver is found
#    for file in ShaderPUB_Dir:
#        if(fileVerNum == ShaderVer):
#            print("Shader Version Found!")
#            mc.file(import ShaderPUB_Dir + "/tst_Surfacing_v"+str(ShaderVer)+".mb") #Import most recent Shader Ver
#        else:
#            print("Shader Version Not Found!")
#
######Exact Same Code as ImportLatestShaders() but instead of incrementing the value to find highest one,
######Increment Value until LightingVer (from input text field) is found    
#            
############################################ PSEDUDOCODE END ############################################
    
    print("ApplyLighting")
    

def ReloadLighting():
    #¯\_(ツ)_/¯# Placeholder Function
    print("ReloadLighting")






### Yucky Gui Stuff ###
if mc.window('Shader_Publishing', exists = True):
    mc.deleteUI('Shader_Publishing')
mc.window('Shader_Publishing', resizeToFitChildren = True)
mc.columnLayout(adjustableColumn = True, cal = "center", w=300)
mc.separator(h=10)
mc.text('Project File Directory')
mc.separator(h=10)
mc.textField(tx = ProjectDir)

### Shader Exporting Functions ###
mc.separator(h=10)
mc.text('Surfacing: Select Objects to Publish')
mc.separator(h=10)
mc.button(label = 'Export Shaders to Publish', command = 'PublishShaders()', en = not isCurrentlyInLighting) #Temp Bool Inverter

##TEMPORARY SHADER TESTING INPUT##
mc.separator(h=10)
mc.text('!!TEMP SHADER SAVING TEST!!')
TEMPSHADERTEST = mc.intField(width = 50, v=0)

### Shader Importing Functions ###
mc.separator(h=30)
mc.text('Lighting: Select Objects to Re-Apply Materials')
mc.separator(h=10)
mc.button(label = 'Import Latest Shaders', command = 'ImportLatestShaders()', en = isCurrentlyInLighting)
mc.separator(h=10)

mc.gridLayout(ch=20,cw=150, nrc=[3,2], autoGrow= True)

mc.text('Enter Version Number:')
ShaderVerInput = mc.intField(width = 50, v=0, en = isCurrentlyInLighting)

mc.separator(h=10)
mc.separator(h=10)

mc.button(label = 'Reload Shaders', command = 'ReloadLighting()', en = isCurrentlyInLighting)
mc.button(label = 'Apply Custom Shaders', command = 'ApplyCustomShaders()', en = isCurrentlyInLighting)

mc.separator(h=10)
mc.separator(h=10)

mc.showWindow('Shader_Publishing')